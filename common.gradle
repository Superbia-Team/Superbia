apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'

String mavenGroupId = 'com.dm.estore'
String mavenVersion = '1.0-SNAPSHOT'

buildDir = 'target'

sourceCompatibility = '1.7'
targetCompatibility = '1.7'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
    // First check local cache before accessing central repository
    flatDir(dirs: [
            "file:///" + rootDir + "/libs"
    ]);
    mavenCentral();
}

ext {
    slf4jVersion = '1.7.2'
    logbackVersion = '1.0.9'
    jettyVersion = '9.0.3.v20130506'
    jerseyVersion = '1.17.1'
    springVersion = '3.2.4.RELEASE'
    hibernateVersion = '5.0.1.Final'
}

configurations {
    provided
    runtimeLibs

    /*
    // Note: Uncomment if we need to include all classes in the WEB-INF\lib folder.
    compile {
        extendsFrom runtimeLibs
    }*/
}

dependencies {
    runtimeLibs(
            [group: 'javax.validation', name : 'validation-api', version : '1.1.0.Final'],
            [group: 'org.slf4j', name : 'slf4j-api', version : ext.slf4jVersion],
            [group: 'ch.qos.logback', name : 'logback-classic', version : ext.logbackVersion],
            [group: 'ch.qos.logback', name : 'logback-core', version : ext.logbackVersion],
            [group: 'org.slf4j', name : 'jcl-over-slf4j', version : ext.slf4jVersion],
            [group: 'org.slf4j', name : 'jul-to-slf4j', version : ext.slf4jVersion],
            [group: 'org.slf4j', name : 'log4j-over-slf4j', version : ext.slf4jVersion],

            [group: 'com.google.guava', name : 'guava', version : '14.0.1'],

            [group: 'javax.ws.rs', name : 'jsr311-api', version : '1.1.1'],
            [group: 'javax.xml.bind', name : 'jaxb-api', version : '2.2.7'],
            [group: 'org.codehaus.jackson', name : 'jackson-xc', version : '1.9.13'],
            [group: 'org.codehaus.jackson', name : 'jackson-core-asl', version : '1.9.13'],
            [group: 'org.codehaus.jackson', name : 'jackson-jaxrs', version : '1.9.13'],
            [group: 'org.codehaus.jackson', name : 'jackson-mapper-asl', version : '1.9.13'],
            [group: 'org.codehaus.jackson', name : 'jackson-mapper-asl', version : '1.9.13'],

            [group: 'commons-lang', name : 'commons-lang', version : '2.6'],
            [group: 'commons-collections', name : 'commons-collections', version : '3.2.1'],

            [group: 'org.springframework', name : 'spring-core', version : ext.springVersion],
            [group: 'org.springframework', name : 'spring-context', version : ext.springVersion],
            [group: 'org.springframework', name : 'spring-beans', version : ext.springVersion],
            [group: 'org.springframework', name : 'spring-aop', version : ext.springVersion],
            [group: 'org.springframework', name : 'spring-oxm', version : ext.springVersion],
    )

    provided(
            [group: 'javax.servlet', name : 'javax.servlet-api', version : '3.0.1'],
            [group: 'javax.servlet.jsp', name : 'javax.servlet.jsp-api', version : '2.3.1'],
    )

    testCompile(
            [group: 'org.mockito', name : 'mockito-all', version : '1.9.5'],
            [group: 'org.testng', name : 'testng', version : '6.8.7'],
            [group: 'org.uncommons', name : 'reportng', version : '1.1.3'],
            [group: 'org.easytesting', name : 'fest-assert-core', version : '2.0M10'],
            [group: 'velocity', name : 'velocity', version : '1.4'],
    )
}

String mavenArtifactId = name

group = mavenGroupId
version = mavenVersion

task sourcesJar(type: Jar, dependsOn: classes, description: 'Creates a jar from the source files.') {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task createFolders(description: 'Creates the source folders if they do not exist.') doLast {
    sourceSets*.allSource*.srcDirs*.each { File srcDir ->
        if (!srcDir.isDirectory()) {
            println "Creating source folder: ${srcDir}"
            srcDir.mkdirs()
        }
    }
}

// ensure that test resources (src/test/resources) are added to CLASSPATH;
// see http://forums.gradle.org/gradle/topics/tests_arent_executed_when_setting_the_test_runtimeclasspath and
// http://gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html#org.gradle.api.tasks.testing.Test:classpath
sourceSets {
    main {
        compileClasspath += configurations.provided + configurations.runtimeLibs
    }
    test {
        compileClasspath += configurations.provided + configurations.runtimeLibs
        runtimeClasspath += files(output.resourcesDir) + runtimeClasspath + configurations.provided + configurations.runtimeLibs
    }
}

// change output folder
eclipse {
    classpath {
        plusConfigurations += configurations.runtimeLibs
        plusConfigurations += configurations.provided
        defaultOutputDir = file('target/classes/eclipse')
        downloadJavadoc = true
        downloadSources = true
    }
}
idea {
    module {
        outputDir = file('target')
        scopes.COMPILE.plus += configurations.runtimeLibs
        scopes.COMPILE.plus += configurations.provided
        downloadJavadoc = true
        downloadSources = true
    }
}


// Use TestNG instead of the default JUnit
test {
    useTestNG() {
        suiteXmlBuilder().suite(name: 'estore-tests', parallel: 'tests') {
            test (name : 'all-tests') {
                packages {
                    'package' (name: 'com.dm.estore.*')
                }
            }
        }
    }
    options {
        listeners << 'org.uncommons.reportng.HTMLReporter'
        listeners << 'org.uncommons.reportng.JUnitXMLReporter'
    }
    ext.useDefaultListeners = true
    ext.workingDirectory = 'target/'
}
